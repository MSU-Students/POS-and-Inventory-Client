/* tslint:disable */
/* eslint-disable */
/**
 * BesTea POS and Inventory
 * The POS and Inventory API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface ChangePasswordDto
 */
export interface ChangePasswordDto {
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'oldPassword': string;
    /**
     * 
     * @type {string}
     * @memberof ChangePasswordDto
     */
    'newPassword': string;
}
/**
 * 
 * @export
 * @interface CustomerDto
 */
export interface CustomerDto {
    /**
     * 
     * @type {number}
     * @memberof CustomerDto
     */
    'customerID'?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'customerName': string;
    /**
     * 
     * @type {string}
     * @memberof CustomerDto
     */
    'date_created': string;
}
/**
 * 
 * @export
 * @interface ExpensesDto
 */
export interface ExpensesDto {
    /**
     * 
     * @type {number}
     * @memberof ExpensesDto
     */
    'expensesID'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExpensesDto
     */
    'expensesName': string;
    /**
     * 
     * @type {string}
     * @memberof ExpensesDto
     */
    'expensesDate': string;
    /**
     * 
     * @type {string}
     * @memberof ExpensesDto
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof ExpensesDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ExpensesDto
     */
    'expensesCategory'?: string;
    /**
     * 
     * @type {SupplierDto}
     * @memberof ExpensesDto
     */
    'supplier'?: SupplierDto;
}
/**
 * 
 * @export
 * @interface InventoryDto
 */
export interface InventoryDto {
    /**
     * 
     * @type {number}
     * @memberof InventoryDto
     */
    'itemCode'?: number;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemName': string;
    /**
     * 
     * @type {number}
     * @memberof InventoryDto
     */
    'itemQuantProd'?: number;
    /**
     * 
     * @type {number}
     * @memberof InventoryDto
     */
    'itemQuantStatus': number;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemStatus': string;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemUnitProd'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemExpiryDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemDateCreated': string;
    /**
     * 
     * @type {string}
     * @memberof InventoryDto
     */
    'itemConsumeAt': string;
}
/**
 * 
 * @export
 * @interface ManageProductDto
 */
export interface ManageProductDto {
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'product_ID'?: string;
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'productName': string;
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'productSize': string;
    /**
     * 
     * @type {number}
     * @memberof ManageProductDto
     */
    'productPrice': number;
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'productCategory': string;
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'productSubCategory': string;
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'productAvailability': string;
    /**
     * 
     * @type {string}
     * @memberof ManageProductDto
     */
    'productDateCreated': string;
    /**
     * 
     * @type {number}
     * @memberof ManageProductDto
     */
    'url'?: number;
}
/**
 * 
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
    /**
     * 
     * @type {number}
     * @memberof MediaDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'mimeType': string;
    /**
     * 
     * @type {string}
     * @memberof MediaDto
     */
    'filename'?: string;
}
/**
 * 
 * @export
 * @interface PurchaseDto
 */
export interface PurchaseDto {
    /**
     * 
     * @type {number}
     * @memberof PurchaseDto
     */
    'purchaseID'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'purchaseProduct': string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'purchaseDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'purchaseCategory': string;
    /**
     * 
     * @type {number}
     * @memberof PurchaseDto
     */
    'productQuantity'?: number;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'productUnit'?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchaseDto
     */
    'purchaseStatus': string;
    /**
     * 
     * @type {number}
     * @memberof PurchaseDto
     */
    'purchaseAmount': number;
    /**
     * 
     * @type {SupplierDto}
     * @memberof PurchaseDto
     */
    'supplierPurchase'?: SupplierDto;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface SaleOrderDto
 */
export interface SaleOrderDto {
    /**
     * 
     * @type {number}
     * @memberof SaleOrderDto
     */
    'order_ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof SaleOrderDto
     */
    'orderName': string;
    /**
     * 
     * @type {number}
     * @memberof SaleOrderDto
     */
    'orderQuant': number;
    /**
     * 
     * @type {number}
     * @memberof SaleOrderDto
     */
    'orderPrice': number;
    /**
     * 
     * @type {string}
     * @memberof SaleOrderDto
     */
    'orderSize': string;
    /**
     * 
     * @type {string}
     * @memberof SaleOrderDto
     */
    'orderCategory'?: string;
    /**
     * 
     * @type {string}
     * @memberof SaleOrderDto
     */
    'orderSubCategory'?: string;
    /**
     * 
     * @type {number}
     * @memberof SaleOrderDto
     */
    'orderSubTotal': number;
    /**
     * 
     * @type {SaleRecordDto}
     * @memberof SaleOrderDto
     */
    'invoice'?: SaleRecordDto;
}
/**
 * 
 * @export
 * @interface SaleRecordDto
 */
export interface SaleRecordDto {
    /**
     * 
     * @type {number}
     * @memberof SaleRecordDto
     */
    'invoiceID'?: number;
    /**
     * 
     * @type {string}
     * @memberof SaleRecordDto
     */
    'sales_order_created': string;
    /**
     * 
     * @type {number}
     * @memberof SaleRecordDto
     */
    'totalAmount': number;
    /**
     * 
     * @type {number}
     * @memberof SaleRecordDto
     */
    'payment': number;
    /**
     * 
     * @type {UserDto}
     * @memberof SaleRecordDto
     */
    'user'?: UserDto;
    /**
     * 
     * @type {CustomerDto}
     * @memberof SaleRecordDto
     */
    'customer'?: CustomerDto;
    /**
     * 
     * @type {SaleOrderDto}
     * @memberof SaleRecordDto
     */
    'saleOrder'?: SaleOrderDto;
}
/**
 * 
 * @export
 * @interface SupplierDto
 */
export interface SupplierDto {
    /**
     * 
     * @type {number}
     * @memberof SupplierDto
     */
    'supplierID'?: number;
    /**
     * 
     * @type {string}
     * @memberof SupplierDto
     */
    'supplierName': string;
    /**
     * 
     * @type {string}
     * @memberof SupplierDto
     */
    'company'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupplierDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupplierDto
     */
    'contact'?: string;
    /**
     * 
     * @type {string}
     * @memberof SupplierDto
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'FName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'MName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'LName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'contact'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userDateCreated': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Customer
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomer: async (customerDto: CustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerDto' is not null or undefined
            assertParamExists('addCustomer', 'customerDto', customerDto)
            const localVarPath = `/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Expense
         * @param {ExpensesDto} expensesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpenses: async (expensesDto: ExpensesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expensesDto' is not null or undefined
            assertParamExists('addExpenses', 'expensesDto', expensesDto)
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expensesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Inventory
         * @param {InventoryDto} inventoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventory: async (inventoryDto: InventoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryDto' is not null or undefined
            assertParamExists('addInventory', 'inventoryDto', inventoryDto)
            const localVarPath = `/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Product
         * @param {ManageProductDto} manageProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct: async (manageProductDto: ManageProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'manageProductDto' is not null or undefined
            assertParamExists('addProduct', 'manageProductDto', manageProductDto)
            const localVarPath = `/manage-product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manageProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Purchase
         * @param {PurchaseDto} purchaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPurchase: async (purchaseDto: PurchaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseDto' is not null or undefined
            assertParamExists('addPurchase', 'purchaseDto', purchaseDto)
            const localVarPath = `/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new SaleOrder
         * @param {SaleOrderDto} saleOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSaleOrder: async (saleOrderDto: SaleOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleOrderDto' is not null or undefined
            assertParamExists('addSaleOrder', 'saleOrderDto', saleOrderDto)
            const localVarPath = `/sale-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Sale Record
         * @param {SaleRecordDto} saleRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSaleRecord: async (saleRecordDto: SaleRecordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'saleRecordDto' is not null or undefined
            assertParamExists('addSaleRecord', 'saleRecordDto', saleRecordDto)
            const localVarPath = `/SaleRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleRecordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new supplier
         * @param {SupplierDto} supplierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSupplier: async (supplierDto: SupplierDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierDto' is not null or undefined
            assertParamExists('addSupplier', 'supplierDto', supplierDto)
            const localVarPath = `/supplier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplierDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('addUser', 'userDto', userDto)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change the password
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordDto: ChangePasswordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordDto' is not null or undefined
            assertParamExists('changePassword', 'changePasswordDto', changePasswordDto)
            const localVarPath = `/auth/changepassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCustomer', 'id', id)
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Expense by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpense: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExpense', 'id', id)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Inventory by id
         * @param {string} itemCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventory: async (itemCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemCode' is not null or undefined
            assertParamExists('deleteInventory', 'itemCode', itemCode)
            const localVarPath = `/inventory/{itemCode}`
                .replace(`{${"itemCode"}}`, encodeURIComponent(String(itemCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedia: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Product by id
         * @param {string} productID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (productID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productID' is not null or undefined
            assertParamExists('deleteProduct', 'productID', productID)
            const localVarPath = `/manage-product/{product_ID}`
                .replace(`{${"product_ID"}}`, encodeURIComponent(String(productID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Purchase by id
         * @param {number} purchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchase: async (purchaseID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseID' is not null or undefined
            assertParamExists('deletePurchase', 'purchaseID', purchaseID)
            const localVarPath = `/purchase/{purchaseID}`
                .replace(`{${"purchaseID"}}`, encodeURIComponent(String(purchaseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete SaleOrder by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaleOrder: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSaleOrder', 'id', id)
            const localVarPath = `/sale-order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sale Record by id
         * @param {number} invoiceID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaleRecord: async (invoiceID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceID' is not null or undefined
            assertParamExists('deleteSaleRecord', 'invoiceID', invoiceID)
            const localVarPath = `/SaleRecord/{invoiceID}`
                .replace(`{${"invoiceID"}}`, encodeURIComponent(String(invoiceID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete supplier by id
         * @param {number} supplierID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupplier: async (supplierID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierID' is not null or undefined
            assertParamExists('deleteSupplier', 'supplierID', supplierID)
            const localVarPath = `/supplier/{supplierID}`
                .replace(`{${"supplierID"}}`, encodeURIComponent(String(supplierID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Filter Inventory item by keyword
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filterInventoryItem: async (keyword: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            assertParamExists('filterInventoryItem', 'keyword', keyword)
            const localVarPath = `/inventory/filter/{keyword}`
                .replace(`{${"keyword"}}`, encodeURIComponent(String(keyword)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Filter
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filterPurchase: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('filterPurchase', 'id', id)
            const localVarPath = `/purchase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Customers by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCustomer', 'id', id)
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Expenses by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpense: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExpense', 'id', id)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Inventory by id
         * @param {string} itemCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory: async (itemCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemCode' is not null or undefined
            assertParamExists('getInventory', 'itemCode', itemCode)
            const localVarPath = `/inventory/{itemCode}`
                .replace(`{${"itemCode"}}`, encodeURIComponent(String(itemCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventorys: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMedia', 'id', id)
            const localVarPath = `/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Product by id
         * @param {string} productID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (productID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productID' is not null or undefined
            assertParamExists('getProduct', 'productID', productID)
            const localVarPath = `/manage-product/{product_ID}`
                .replace(`{${"product_ID"}}`, encodeURIComponent(String(productID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/manage-product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Purchase by id
         * @param {number} purchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchase: async (purchaseID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseID' is not null or undefined
            assertParamExists('getPurchase', 'purchaseID', purchaseID)
            const localVarPath = `/purchase/{purchaseID}`
                .replace(`{${"purchaseID"}}`, encodeURIComponent(String(purchaseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchases: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SaleOrders by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleOrder: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSaleOrder', 'id', id)
            const localVarPath = `/sale-order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleOrders: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sale-order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sale Record by id
         * @param {number} invoiceID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleRecord: async (invoiceID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceID' is not null or undefined
            assertParamExists('getSaleRecord', 'invoiceID', invoiceID)
            const localVarPath = `/SaleRecord/{invoiceID}`
                .replace(`{${"invoiceID"}}`, encodeURIComponent(String(invoiceID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Sale Record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleRecords: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/SaleRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get supplier by id
         * @param {number} supplierID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplier: async (supplierID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierID' is not null or undefined
            assertParamExists('getSupplier', 'supplierID', supplierID)
            const localVarPath = `/supplier/{supplierID}`
                .replace(`{${"supplierID"}}`, encodeURIComponent(String(supplierID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all supplier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuppliers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/supplier`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('register', 'userDto', userDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Customer by id
         * @param {number} id 
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer: async (id: number, customerDto: CustomerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCustomer', 'id', id)
            // verify required parameter 'customerDto' is not null or undefined
            assertParamExists('updateCustomer', 'customerDto', customerDto)
            const localVarPath = `/customer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Expense by id
         * @param {number} id 
         * @param {ExpensesDto} expensesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpense: async (id: number, expensesDto: ExpensesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExpense', 'id', id)
            // verify required parameter 'expensesDto' is not null or undefined
            assertParamExists('updateExpense', 'expensesDto', expensesDto)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expensesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Inventory by id
         * @param {string} itemCode 
         * @param {InventoryDto} inventoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory: async (itemCode: string, inventoryDto: InventoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemCode' is not null or undefined
            assertParamExists('updateInventory', 'itemCode', itemCode)
            // verify required parameter 'inventoryDto' is not null or undefined
            assertParamExists('updateInventory', 'inventoryDto', inventoryDto)
            const localVarPath = `/inventory/{itemCode}`
                .replace(`{${"itemCode"}}`, encodeURIComponent(String(itemCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inventoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Product by id
         * @param {string} productID 
         * @param {ManageProductDto} manageProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (productID: string, manageProductDto: ManageProductDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productID' is not null or undefined
            assertParamExists('updateProduct', 'productID', productID)
            // verify required parameter 'manageProductDto' is not null or undefined
            assertParamExists('updateProduct', 'manageProductDto', manageProductDto)
            const localVarPath = `/manage-product/{product_ID}`
                .replace(`{${"product_ID"}}`, encodeURIComponent(String(productID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manageProductDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Purchase by id
         * @param {number} purchaseID 
         * @param {PurchaseDto} purchaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePurchase: async (purchaseID: number, purchaseDto: PurchaseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseID' is not null or undefined
            assertParamExists('updatePurchase', 'purchaseID', purchaseID)
            // verify required parameter 'purchaseDto' is not null or undefined
            assertParamExists('updatePurchase', 'purchaseDto', purchaseDto)
            const localVarPath = `/purchase/{purchaseID}`
                .replace(`{${"purchaseID"}}`, encodeURIComponent(String(purchaseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update SaleOrder by id
         * @param {number} id 
         * @param {SaleOrderDto} saleOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaleOrder: async (id: number, saleOrderDto: SaleOrderDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSaleOrder', 'id', id)
            // verify required parameter 'saleOrderDto' is not null or undefined
            assertParamExists('updateSaleOrder', 'saleOrderDto', saleOrderDto)
            const localVarPath = `/sale-order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleOrderDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Sale Record by id
         * @param {number} invoiceID 
         * @param {SaleRecordDto} saleRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaleRecord: async (invoiceID: number, saleRecordDto: SaleRecordDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceID' is not null or undefined
            assertParamExists('updateSaleRecord', 'invoiceID', invoiceID)
            // verify required parameter 'saleRecordDto' is not null or undefined
            assertParamExists('updateSaleRecord', 'saleRecordDto', saleRecordDto)
            const localVarPath = `/SaleRecord/{invoiceID}`
                .replace(`{${"invoiceID"}}`, encodeURIComponent(String(invoiceID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saleRecordDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update supplier by id
         * @param {number} supplierID 
         * @param {SupplierDto} supplierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier: async (supplierID: number, supplierDto: SupplierDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'supplierID' is not null or undefined
            assertParamExists('updateSupplier', 'supplierID', supplierID)
            // verify required parameter 'supplierDto' is not null or undefined
            assertParamExists('updateSupplier', 'supplierDto', supplierDto)
            const localVarPath = `/supplier/{supplierID}`
                .replace(`{${"supplierID"}}`, encodeURIComponent(String(supplierID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(supplierDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('updateUser', 'userDto', userDto)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia: async (file?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/media/uploadFile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Customer
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCustomer(customerDto: CustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCustomer(customerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Expense
         * @param {ExpensesDto} expensesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addExpenses(expensesDto: ExpensesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addExpenses(expensesDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Inventory
         * @param {InventoryDto} inventoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addInventory(inventoryDto: InventoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addInventory(inventoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Product
         * @param {ManageProductDto} manageProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProduct(manageProductDto: ManageProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManageProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(manageProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Purchase
         * @param {PurchaseDto} purchaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPurchase(purchaseDto: PurchaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPurchase(purchaseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new SaleOrder
         * @param {SaleOrderDto} saleOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSaleOrder(saleOrderDto: SaleOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSaleOrder(saleOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Sale Record
         * @param {SaleRecordDto} saleRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSaleRecord(saleRecordDto: SaleRecordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSaleRecord(saleRecordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new supplier
         * @param {SupplierDto} supplierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSupplier(supplierDto: SupplierDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSupplier(supplierDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change the password
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCustomer(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCustomer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Expense by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExpense(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExpense(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Inventory by id
         * @param {string} itemCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInventory(itemCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInventory(itemCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMedia(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Product by id
         * @param {string} productID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(productID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManageProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(productID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Purchase by id
         * @param {number} purchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePurchase(purchaseID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePurchase(purchaseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete SaleOrder by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSaleOrder(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSaleOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Sale Record by id
         * @param {number} invoiceID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSaleRecord(invoiceID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSaleRecord(invoiceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete supplier by id
         * @param {number} supplierID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSupplier(supplierID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSupplier(supplierID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Filter Inventory item by keyword
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filterInventoryItem(keyword: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filterInventoryItem(keyword, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Filter
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filterPurchase(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filterPurchase(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Customers by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Expenses by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpense(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpense(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpensesDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Inventory by id
         * @param {string} itemCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInventory(itemCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInventory(itemCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInventorys(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInventorys(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMedia(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMedia(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Product by id
         * @param {string} productID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(productID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManageProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(productID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProducts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManageProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Purchase by id
         * @param {number} purchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchase(purchaseID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchase(purchaseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchases(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchases(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SaleOrders by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaleOrder(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaleOrder(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaleOrders(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SaleOrderDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaleOrders(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Sale Record by id
         * @param {number} invoiceID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaleRecord(invoiceID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaleRecord(invoiceID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Sale Record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSaleRecords(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSaleRecords(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get supplier by id
         * @param {number} supplierID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupplier(supplierID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplier(supplierID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all supplier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuppliers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSuppliers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Customer by id
         * @param {number} id 
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomer(id: number, customerDto: CustomerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomer(id, customerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Expense by id
         * @param {number} id 
         * @param {ExpensesDto} expensesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExpense(id: number, expensesDto: ExpensesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpense(id, expensesDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Inventory by id
         * @param {string} itemCode 
         * @param {InventoryDto} inventoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInventory(itemCode: string, inventoryDto: InventoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInventory(itemCode, inventoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Product by id
         * @param {string} productID 
         * @param {ManageProductDto} manageProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(productID: string, manageProductDto: ManageProductDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManageProductDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(productID, manageProductDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Purchase by id
         * @param {number} purchaseID 
         * @param {PurchaseDto} purchaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePurchase(purchaseID: number, purchaseDto: PurchaseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePurchase(purchaseID, purchaseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update SaleOrder by id
         * @param {number} id 
         * @param {SaleOrderDto} saleOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaleOrder(id: number, saleOrderDto: SaleOrderDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleOrderDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaleOrder(id, saleOrderDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Sale Record by id
         * @param {number} invoiceID 
         * @param {SaleRecordDto} saleRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSaleRecord(invoiceID: number, saleRecordDto: SaleRecordDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SaleRecordDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSaleRecord(invoiceID, saleRecordDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update supplier by id
         * @param {number} supplierID 
         * @param {SupplierDto} supplierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSupplier(supplierID: number, supplierDto: SupplierDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSupplier(supplierID, supplierDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMedia(file?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Customer
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCustomer(customerDto: CustomerDto, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.addCustomer(customerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Expense
         * @param {ExpensesDto} expensesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addExpenses(expensesDto: ExpensesDto, options?: any): AxiosPromise<ExpensesDto> {
            return localVarFp.addExpenses(expensesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Inventory
         * @param {InventoryDto} inventoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addInventory(inventoryDto: InventoryDto, options?: any): AxiosPromise<InventoryDto> {
            return localVarFp.addInventory(inventoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Product
         * @param {ManageProductDto} manageProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(manageProductDto: ManageProductDto, options?: any): AxiosPromise<ManageProductDto> {
            return localVarFp.addProduct(manageProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Purchase
         * @param {PurchaseDto} purchaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPurchase(purchaseDto: PurchaseDto, options?: any): AxiosPromise<PurchaseDto> {
            return localVarFp.addPurchase(purchaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new SaleOrder
         * @param {SaleOrderDto} saleOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSaleOrder(saleOrderDto: SaleOrderDto, options?: any): AxiosPromise<SaleOrderDto> {
            return localVarFp.addSaleOrder(saleOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Sale Record
         * @param {SaleRecordDto} saleRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSaleRecord(saleRecordDto: SaleRecordDto, options?: any): AxiosPromise<SaleRecordDto> {
            return localVarFp.addSaleRecord(saleRecordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new supplier
         * @param {SupplierDto} supplierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSupplier(supplierDto: SupplierDto, options?: any): AxiosPromise<SupplierDto> {
            return localVarFp.addSupplier(supplierDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.addUser(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change the password
         * @param {ChangePasswordDto} changePasswordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(changePasswordDto: ChangePasswordDto, options?: any): AxiosPromise<void> {
            return localVarFp.changePassword(changePasswordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Customer by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCustomer(id: number, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.deleteCustomer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Expense by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpense(id: number, options?: any): AxiosPromise<ExpensesDto> {
            return localVarFp.deleteExpense(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Inventory by id
         * @param {string} itemCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInventory(itemCode: string, options?: any): AxiosPromise<InventoryDto> {
            return localVarFp.deleteInventory(itemCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMedia(id: number, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.deleteMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Product by id
         * @param {string} productID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(productID: string, options?: any): AxiosPromise<ManageProductDto> {
            return localVarFp.deleteProduct(productID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Purchase by id
         * @param {number} purchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePurchase(purchaseID: number, options?: any): AxiosPromise<PurchaseDto> {
            return localVarFp.deletePurchase(purchaseID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete SaleOrder by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaleOrder(id: number, options?: any): AxiosPromise<SaleOrderDto> {
            return localVarFp.deleteSaleOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sale Record by id
         * @param {number} invoiceID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSaleRecord(invoiceID: number, options?: any): AxiosPromise<SaleRecordDto> {
            return localVarFp.deleteSaleRecord(invoiceID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete supplier by id
         * @param {number} supplierID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSupplier(supplierID: number, options?: any): AxiosPromise<SupplierDto> {
            return localVarFp.deleteSupplier(supplierID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Filter Inventory item by keyword
         * @param {string} keyword 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filterInventoryItem(keyword: string, options?: any): AxiosPromise<InventoryDto> {
            return localVarFp.filterInventoryItem(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Filter
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filterPurchase(id: string, options?: any): AxiosPromise<PurchaseDto> {
            return localVarFp.filterPurchase(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Customers by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(id: number, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.getCustomer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomers(options?: any): AxiosPromise<Array<CustomerDto>> {
            return localVarFp.getCustomers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Expenses by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpense(id: number, options?: any): AxiosPromise<ExpensesDto> {
            return localVarFp.getExpense(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenses(options?: any): AxiosPromise<Array<ExpensesDto>> {
            return localVarFp.getExpenses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Inventory by id
         * @param {string} itemCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventory(itemCode: string, options?: any): AxiosPromise<InventoryDto> {
            return localVarFp.getInventory(itemCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInventorys(options?: any): AxiosPromise<InventoryDto> {
            return localVarFp.getInventorys(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Media by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMedia(id: number, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.getMedia(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Product by id
         * @param {string} productID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(productID: string, options?: any): AxiosPromise<ManageProductDto> {
            return localVarFp.getProduct(productID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProducts(options?: any): AxiosPromise<ManageProductDto> {
            return localVarFp.getProducts(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Purchase by id
         * @param {number} purchaseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchase(purchaseID: number, options?: any): AxiosPromise<PurchaseDto> {
            return localVarFp.getPurchase(purchaseID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Purchase
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchases(options?: any): AxiosPromise<PurchaseDto> {
            return localVarFp.getPurchases(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SaleOrders by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleOrder(id: number, options?: any): AxiosPromise<SaleOrderDto> {
            return localVarFp.getSaleOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Product Size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleOrders(options?: any): AxiosPromise<Array<SaleOrderDto>> {
            return localVarFp.getSaleOrders(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sale Record by id
         * @param {number} invoiceID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleRecord(invoiceID: number, options?: any): AxiosPromise<SaleRecordDto> {
            return localVarFp.getSaleRecord(invoiceID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Sale Record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSaleRecords(options?: any): AxiosPromise<SaleRecordDto> {
            return localVarFp.getSaleRecords(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get supplier by id
         * @param {number} supplierID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupplier(supplierID: number, options?: any): AxiosPromise<SupplierDto> {
            return localVarFp.getSupplier(supplierID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all supplier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuppliers(options?: any): AxiosPromise<SupplierDto> {
            return localVarFp.getSuppliers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Customer by id
         * @param {number} id 
         * @param {CustomerDto} customerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomer(id: number, customerDto: CustomerDto, options?: any): AxiosPromise<CustomerDto> {
            return localVarFp.updateCustomer(id, customerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Expense by id
         * @param {number} id 
         * @param {ExpensesDto} expensesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpense(id: number, expensesDto: ExpensesDto, options?: any): AxiosPromise<ExpensesDto> {
            return localVarFp.updateExpense(id, expensesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Inventory by id
         * @param {string} itemCode 
         * @param {InventoryDto} inventoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInventory(itemCode: string, inventoryDto: InventoryDto, options?: any): AxiosPromise<InventoryDto> {
            return localVarFp.updateInventory(itemCode, inventoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Product by id
         * @param {string} productID 
         * @param {ManageProductDto} manageProductDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(productID: string, manageProductDto: ManageProductDto, options?: any): AxiosPromise<ManageProductDto> {
            return localVarFp.updateProduct(productID, manageProductDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Purchase by id
         * @param {number} purchaseID 
         * @param {PurchaseDto} purchaseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePurchase(purchaseID: number, purchaseDto: PurchaseDto, options?: any): AxiosPromise<PurchaseDto> {
            return localVarFp.updatePurchase(purchaseID, purchaseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update SaleOrder by id
         * @param {number} id 
         * @param {SaleOrderDto} saleOrderDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaleOrder(id: number, saleOrderDto: SaleOrderDto, options?: any): AxiosPromise<SaleOrderDto> {
            return localVarFp.updateSaleOrder(id, saleOrderDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Sale Record by id
         * @param {number} invoiceID 
         * @param {SaleRecordDto} saleRecordDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSaleRecord(invoiceID: number, saleRecordDto: SaleRecordDto, options?: any): AxiosPromise<SaleRecordDto> {
            return localVarFp.updateSaleRecord(invoiceID, saleRecordDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update supplier by id
         * @param {number} supplierID 
         * @param {SupplierDto} supplierDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSupplier(supplierID: number, supplierDto: SupplierDto, options?: any): AxiosPromise<SupplierDto> {
            return localVarFp.updateSupplier(supplierID, supplierDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUser(id, userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Media
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMedia(file?: any, options?: any): AxiosPromise<MediaDto> {
            return localVarFp.uploadMedia(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Customer
     * @param {CustomerDto} customerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCustomer(customerDto: CustomerDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCustomer(customerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Expense
     * @param {ExpensesDto} expensesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addExpenses(expensesDto: ExpensesDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addExpenses(expensesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Inventory
     * @param {InventoryDto} inventoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addInventory(inventoryDto: InventoryDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addInventory(inventoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Product
     * @param {ManageProductDto} manageProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addProduct(manageProductDto: ManageProductDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addProduct(manageProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Purchase
     * @param {PurchaseDto} purchaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPurchase(purchaseDto: PurchaseDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPurchase(purchaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new SaleOrder
     * @param {SaleOrderDto} saleOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSaleOrder(saleOrderDto: SaleOrderDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSaleOrder(saleOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Sale Record
     * @param {SaleRecordDto} saleRecordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSaleRecord(saleRecordDto: SaleRecordDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSaleRecord(saleRecordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new supplier
     * @param {SupplierDto} supplierDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSupplier(supplierDto: SupplierDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSupplier(supplierDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new user
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addUser(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change the password
     * @param {ChangePasswordDto} changePasswordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public changePassword(changePasswordDto: ChangePasswordDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).changePassword(changePasswordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Customer by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCustomer(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCustomer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Expense by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteExpense(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteExpense(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Inventory by id
     * @param {string} itemCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteInventory(itemCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteInventory(itemCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Media by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteMedia(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Product by id
     * @param {string} productID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProduct(productID: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProduct(productID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Purchase by id
     * @param {number} purchaseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePurchase(purchaseID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePurchase(purchaseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete SaleOrder by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSaleOrder(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSaleOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Sale Record by id
     * @param {number} invoiceID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSaleRecord(invoiceID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSaleRecord(invoiceID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete supplier by id
     * @param {number} supplierID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSupplier(supplierID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSupplier(supplierID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Filter Inventory item by keyword
     * @param {string} keyword 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public filterInventoryItem(keyword: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).filterInventoryItem(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Filter
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public filterPurchase(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).filterPurchase(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Customers by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCustomer(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCustomer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCustomers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCustomers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Expenses by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExpense(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExpense(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getExpenses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getExpenses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Inventory by id
     * @param {string} itemCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInventory(itemCode: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getInventory(itemCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getInventorys(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getInventorys(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Media by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMedia(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMedia(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Product by id
     * @param {string} productID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProduct(productID: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProduct(productID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProducts(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProducts(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Purchase by id
     * @param {number} purchaseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPurchase(purchaseID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPurchase(purchaseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPurchases(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPurchases(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SaleOrders by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSaleOrder(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSaleOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSaleOrders(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSaleOrders(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sale Record by id
     * @param {number} invoiceID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSaleRecord(invoiceID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSaleRecord(invoiceID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Sale Record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSaleRecords(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSaleRecords(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get supplier by id
     * @param {number} supplierID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSupplier(supplierID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSupplier(supplierID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all supplier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSuppliers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSuppliers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Customer by id
     * @param {number} id 
     * @param {CustomerDto} customerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCustomer(id: number, customerDto: CustomerDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCustomer(id, customerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Expense by id
     * @param {number} id 
     * @param {ExpensesDto} expensesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateExpense(id: number, expensesDto: ExpensesDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateExpense(id, expensesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Inventory by id
     * @param {string} itemCode 
     * @param {InventoryDto} inventoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateInventory(itemCode: string, inventoryDto: InventoryDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateInventory(itemCode, inventoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Product by id
     * @param {string} productID 
     * @param {ManageProductDto} manageProductDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateProduct(productID: string, manageProductDto: ManageProductDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateProduct(productID, manageProductDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Purchase by id
     * @param {number} purchaseID 
     * @param {PurchaseDto} purchaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePurchase(purchaseID: number, purchaseDto: PurchaseDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePurchase(purchaseID, purchaseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update SaleOrder by id
     * @param {number} id 
     * @param {SaleOrderDto} saleOrderDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSaleOrder(id: number, saleOrderDto: SaleOrderDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSaleOrder(id, saleOrderDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Sale Record by id
     * @param {number} invoiceID 
     * @param {SaleRecordDto} saleRecordDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSaleRecord(invoiceID: number, saleRecordDto: SaleRecordDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSaleRecord(invoiceID, saleRecordDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update supplier by id
     * @param {number} supplierID 
     * @param {SupplierDto} supplierDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSupplier(supplierID: number, supplierDto: SupplierDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSupplier(supplierID, supplierDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user by id
     * @param {number} id 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(id, userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Media
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadMedia(file?: any, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadMedia(file, options).then((request) => request(this.axios, this.basePath));
    }
}


