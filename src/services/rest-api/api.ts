/* tslint:disable */
/* eslint-disable */
/**
 * BesTea POS and Inventory
 * The POS and Inventory API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base';

/**
 *
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
  /**
   *
   * @type {string}
   * @memberof AccessTokenDto
   */
  accessToken?: string;
  /**
   *
   * @type {string}
   * @memberof AccessTokenDto
   */
  refreshToken?: string;
}
/**
 *
 * @export
 * @interface ExpensesCategoryDto
 */
export interface ExpensesCategoryDto {
  /**
   *
   * @type {string}
   * @memberof ExpensesCategoryDto
   */
  expensesCategoryName: string;
}
/**
 *
 * @export
 * @interface ExpensesDto
 */
export interface ExpensesDto {
  /**
   *
   * @type {string}
   * @memberof ExpensesDto
   */
  expensesName: string;
  /**
   *
   * @type {string}
   * @memberof ExpensesDto
   */
  date: string;
  /**
   *
   * @type {string}
   * @memberof ExpensesDto
   */
  description: string;
  /**
   *
   * @type {number}
   * @memberof ExpensesDto
   */
  amount: number;
}
/**
 *
 * @export
 * @interface InventoryCategoryDto
 */
export interface InventoryCategoryDto {
  /**
   *
   * @type {string}
   * @memberof InventoryCategoryDto
   */
  categoryName: string;
  /**
   *
   * @type {number}
   * @memberof InventoryCategoryDto
   */
  totalProd: number;
  /**
   *
   * @type {number}
   * @memberof InventoryCategoryDto
   */
  stockQuantity: number;
}
/**
 *
 * @export
 * @interface InventoryDto
 */
export interface InventoryDto {
  /**
   *
   * @type {string}
   * @memberof InventoryDto
   */
  itemName: string;
  /**
   *
   * @type {number}
   * @memberof InventoryDto
   */
  itemQuantProd: number;
  /**
   *
   * @type {string}
   * @memberof InventoryDto
   */
  itemUnitProd: string;
  /**
   *
   * @type {string}
   * @memberof InventoryDto
   */
  itemExpiryDate?: string;
}
/**
 *
 * @export
 * @interface ManageProductDto
 */
export interface ManageProductDto {
  /**
   *
   * @type {string}
   * @memberof ManageProductDto
   */
  productName: string;
  /**
   *
   * @type {number}
   * @memberof ManageProductDto
   */
  productPrice: number;
  /**
   *
   * @type {string}
   * @memberof ManageProductDto
   */
  productAvailability: string;
}
/**
 *
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
  /**
   *
   * @type {string}
   * @memberof MediaDto
   */
  mimeType: string;
  /**
   *
   * @type {string}
   * @memberof MediaDto
   */
  filename?: string;
}
/**
 *
 * @export
 * @interface ProdCategoryDto
 */
export interface ProdCategoryDto {
  /**
   *
   * @type {string}
   * @memberof ProdCategoryDto
   */
  prodCategoryName: string;
}
/**
 *
 * @export
 * @interface ProductSizeDto
 */
export interface ProductSizeDto {
  /**
   *
   * @type {number}
   * @memberof ProductSizeDto
   */
  price: number;
  /**
   *
   * @type {string}
   * @memberof ProductSizeDto
   */
  size?: string;
}
/**
 *
 * @export
 * @interface PurchaseDto
 */
export interface PurchaseDto {
  /**
   *
   * @type {string}
   * @memberof PurchaseDto
   */
  purchaseProduct: string;
  /**
   *
   * @type {string}
   * @memberof PurchaseDto
   */
  purchaseStatus: string;
  /**
   *
   * @type {number}
   * @memberof PurchaseDto
   */
  purchaseAmount: number;
}
/**
 *
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
  /**
   *
   * @type {string}
   * @memberof RefreshDto
   */
  refresh_token: string;
}
/**
 *
 * @export
 * @interface SellRecordDto
 */
export interface SellRecordDto {
  /**
   *
   * @type {string}
   * @memberof SellRecordDto
   */
  customerName: string;
  /**
   *
   * @type {number}
   * @memberof SellRecordDto
   */
  transanctionDiscount: number;
  /**
   *
   * @type {number}
   * @memberof SellRecordDto
   */
  tax: number;
  /**
   *
   * @type {number}
   * @memberof SellRecordDto
   */
  totalAmount: number;
}
/**
 *
 * @export
 * @interface SubprodCategoryDto
 */
export interface SubprodCategoryDto {
  /**
   *
   * @type {string}
   * @memberof SubprodCategoryDto
   */
  subProdName: string;
}
/**
 *
 * @export
 * @interface SupplierDto
 */
export interface SupplierDto {
  /**
   *
   * @type {string}
   * @memberof SupplierDto
   */
  supplierName: string;
  /**
   *
   * @type {string}
   * @memberof SupplierDto
   */
  company?: string;
  /**
   *
   * @type {string}
   * @memberof SupplierDto
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof SupplierDto
   */
  contact?: string;
  /**
   *
   * @type {string}
   * @memberof SupplierDto
   */
  address?: string;
}
/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  FName: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  MName?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  LName: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  contact?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  type: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof UserDto
   */
  refreshToken?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Add new Expense
     * @param {ExpensesDto} expensesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExpenses: async (
      expensesDto: ExpensesDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'expensesDto' is not null or undefined
      assertParamExists('addExpenses', 'expensesDto', expensesDto);
      const localVarPath = `/expenses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        expensesDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Expenses Category
     * @param {ExpensesCategoryDto} expensesCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExpensesCategory: async (
      expensesCategoryDto: ExpensesCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'expensesCategoryDto' is not null or undefined
      assertParamExists(
        'addExpensesCategory',
        'expensesCategoryDto',
        expensesCategoryDto
      );
      const localVarPath = `/expenses-category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        expensesCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Inventory
     * @param {InventoryDto} inventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventory: async (
      inventoryDto: InventoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inventoryDto' is not null or undefined
      assertParamExists('addInventory', 'inventoryDto', inventoryDto);
      const localVarPath = `/inventory`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inventoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Inventory Category
     * @param {InventoryCategoryDto} inventoryCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryCategory: async (
      inventoryCategoryDto: InventoryCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'inventoryCategoryDto' is not null or undefined
      assertParamExists(
        'addInventoryCategory',
        'inventoryCategoryDto',
        inventoryCategoryDto
      );
      const localVarPath = `/inventory_category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inventoryCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Product
     * @param {ManageProductDto} manageProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProduct: async (
      manageProductDto: ManageProductDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'manageProductDto' is not null or undefined
      assertParamExists('addProduct', 'manageProductDto', manageProductDto);
      const localVarPath = `/manage-product`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        manageProductDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Product Category
     * @param {ProdCategoryDto} prodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProductCategory: async (
      prodCategoryDto: ProdCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'prodCategoryDto' is not null or undefined
      assertParamExists(
        'addProductCategory',
        'prodCategoryDto',
        prodCategoryDto
      );
      const localVarPath = `/prod-category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        prodCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Product Size
     * @param {ProductSizeDto} productSizeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProductSize: async (
      productSizeDto: ProductSizeDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productSizeDto' is not null or undefined
      assertParamExists('addProductSize', 'productSizeDto', productSizeDto);
      const localVarPath = `/product-size`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        productSizeDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Purchase
     * @param {PurchaseDto} purchaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPurchase: async (
      purchaseDto: PurchaseDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseDto' is not null or undefined
      assertParamExists('addPurchase', 'purchaseDto', purchaseDto);
      const localVarPath = `/purchase`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        purchaseDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new Sell Record
     * @param {SellRecordDto} sellRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSellRecord: async (
      sellRecordDto: SellRecordDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'sellRecordDto' is not null or undefined
      assertParamExists('addSellRecord', 'sellRecordDto', sellRecordDto);
      const localVarPath = `/sell-record`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sellRecordDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new SubCategory of Product
     * @param {SubprodCategoryDto} subprodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubCategoryProduct: async (
      subprodCategoryDto: SubprodCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subprodCategoryDto' is not null or undefined
      assertParamExists(
        'addSubCategoryProduct',
        'subprodCategoryDto',
        subprodCategoryDto
      );
      const localVarPath = `/subprod-category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        subprodCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new supplier
     * @param {SupplierDto} supplierDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSupplier: async (
      supplierDto: SupplierDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'supplierDto' is not null or undefined
      assertParamExists('addSupplier', 'supplierDto', supplierDto);
      const localVarPath = `/supplier`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        supplierDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add new user
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser: async (
      userDto: UserDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userDto' is not null or undefined
      assertParamExists('addUser', 'userDto', userDto);
      const localVarPath = `/user/create`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Expense by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExpense: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteExpense', 'id', id);
      const localVarPath = `/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExpensesCategory: async (
      expensesCategoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'expensesCategoryID' is not null or undefined
      assertParamExists(
        'deleteExpensesCategory',
        'expensesCategoryID',
        expensesCategoryID
      );
      const localVarPath = `/expenses-category/{expensesCategoryID}`.replace(
        `{${'expensesCategoryID'}}`,
        encodeURIComponent(String(expensesCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Inventory by id
     * @param {string} itemCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventory: async (
      itemCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemCode' is not null or undefined
      assertParamExists('deleteInventory', 'itemCode', itemCode);
      const localVarPath = `/inventory/{itemCode}`.replace(
        `{${'itemCode'}}`,
        encodeURIComponent(String(itemCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Inventory Category by id
     * @param {number} categoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventoryCategory: async (
      categoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryID' is not null or undefined
      assertParamExists('deleteInventoryCategory', 'categoryID', categoryID);
      const localVarPath = `/inventory_category/{categoryID}`.replace(
        `{${'categoryID'}}`,
        encodeURIComponent(String(categoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Media by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMedia: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteMedia', 'id', id);
      const localVarPath = `/media/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Product by id
     * @param {string} productID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct: async (
      productID: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productID' is not null or undefined
      assertParamExists('deleteProduct', 'productID', productID);
      const localVarPath = `/manage-product/{product_ID}`.replace(
        `{${'product_ID'}}`,
        encodeURIComponent(String(productID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Product Size by id
     * @param {number} productSizeID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductSize: async (
      productSizeID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productSizeID' is not null or undefined
      assertParamExists('deleteProductSize', 'productSizeID', productSizeID);
      const localVarPath = `/product-size/{productSizeID}`.replace(
        `{${'productSizeID'}}`,
        encodeURIComponent(String(productSizeID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Purchase by id
     * @param {number} purchaseID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePurchase: async (
      purchaseID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseID' is not null or undefined
      assertParamExists('deletePurchase', 'purchaseID', purchaseID);
      const localVarPath = `/purchase/{purchaseID}`.replace(
        `{${'purchaseID'}}`,
        encodeURIComponent(String(purchaseID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete Sell Record by id
     * @param {number} invoiceID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSellRecord: async (
      invoiceID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'invoiceID' is not null or undefined
      assertParamExists('deleteSellRecord', 'invoiceID', invoiceID);
      const localVarPath = `/sell-record/{invoiceID}`.replace(
        `{${'invoiceID'}}`,
        encodeURIComponent(String(invoiceID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubCategoryOfProduct: async (
      subProdCategoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subProdCategoryID' is not null or undefined
      assertParamExists(
        'deleteSubCategoryOfProduct',
        'subProdCategoryID',
        subProdCategoryID
      );
      const localVarPath = `/subprod-category/{subProdCategoryID}`.replace(
        `{${'subProdCategoryID'}}`,
        encodeURIComponent(String(subProdCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete supplier by id
     * @param {number} supplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupplier: async (
      supplierID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'supplierID' is not null or undefined
      assertParamExists('deleteSupplier', 'supplierID', supplierID);
      const localVarPath = `/supplier/{supplierID}`.replace(
        `{${'supplierID'}}`,
        encodeURIComponent(String(supplierID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete user by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteUser', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Expenses by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpense: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getExpense', 'id', id);
      const localVarPath = `/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpenses: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/expenses`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpensesCategory: async (
      expensesCategoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'expensesCategoryID' is not null or undefined
      assertParamExists(
        'getExpensesCategory',
        'expensesCategoryID',
        expensesCategoryID
      );
      const localVarPath = `/expenses-category/{expensesCategoryID}`.replace(
        `{${'expensesCategoryID'}}`,
        encodeURIComponent(String(expensesCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Expenses Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpensesCategorys: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/expenses-category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Inventory by id
     * @param {string} itemCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory: async (
      itemCode: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemCode' is not null or undefined
      assertParamExists('getInventory', 'itemCode', itemCode);
      const localVarPath = `/inventory/{itemCode}`.replace(
        `{${'itemCode'}}`,
        encodeURIComponent(String(itemCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Inventory Category by id
     * @param {number} categoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventoryCategory: async (
      categoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryID' is not null or undefined
      assertParamExists('getInventoryCategory', 'categoryID', categoryID);
      const localVarPath = `/inventory_category/{categoryID}`.replace(
        `{${'categoryID'}}`,
        encodeURIComponent(String(categoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Inventory Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventoryCategorys: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/inventory_category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventorys: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/inventory`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Media by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedia: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getMedia', 'id', id);
      const localVarPath = `/media/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Product by id
     * @param {string} productID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct: async (
      productID: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productID' is not null or undefined
      assertParamExists('getProduct', 'productID', productID);
      const localVarPath = `/manage-product/{product_ID}`.replace(
        `{${'product_ID'}}`,
        encodeURIComponent(String(productID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Product Category by id
     * @param {number} prodCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductCategory: async (
      prodCategoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'prodCategoryID' is not null or undefined
      assertParamExists('getProductCategory', 'prodCategoryID', prodCategoryID);
      const localVarPath = `/prod-category/{prodCategoryID}`.replace(
        `{${'prodCategoryID'}}`,
        encodeURIComponent(String(prodCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Product Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductCategorys: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/prod-category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Product Size by id
     * @param {number} productSizeID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductSize: async (
      productSizeID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productSizeID' is not null or undefined
      assertParamExists('getProductSize', 'productSizeID', productSizeID);
      const localVarPath = `/product-size/{productSizeID}`.replace(
        `{${'productSizeID'}}`,
        encodeURIComponent(String(productSizeID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductSizes: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/product-size`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/manage-product`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Purchase by id
     * @param {number} purchaseID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchase: async (
      purchaseID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseID' is not null or undefined
      assertParamExists('getPurchase', 'purchaseID', purchaseID);
      const localVarPath = `/purchase/{purchaseID}`.replace(
        `{${'purchaseID'}}`,
        encodeURIComponent(String(purchaseID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchases: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/purchase`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get Sell Record by id
     * @param {number} invoiceID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellRecord: async (
      invoiceID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'invoiceID' is not null or undefined
      assertParamExists('getSellRecord', 'invoiceID', invoiceID);
      const localVarPath = `/sell-record/{invoiceID}`.replace(
        `{${'invoiceID'}}`,
        encodeURIComponent(String(invoiceID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Sell Record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellRecords: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/sell-record`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubCategoryProduct: async (
      subProdCategoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subProdCategoryID' is not null or undefined
      assertParamExists(
        'getSubCategoryProduct',
        'subProdCategoryID',
        subProdCategoryID
      );
      const localVarPath = `/subprod-category/{subProdCategoryID}`.replace(
        `{${'subProdCategoryID'}}`,
        encodeURIComponent(String(subProdCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all SubCategory of Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubCategoryProducts: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/subprod-category`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get supplier by id
     * @param {number} supplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupplier: async (
      supplierID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'supplierID' is not null or undefined
      assertParamExists('getSupplier', 'supplierID', supplierID);
      const localVarPath = `/supplier/{supplierID}`.replace(
        `{${'supplierID'}}`,
        encodeURIComponent(String(supplierID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all supplier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuppliers: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/supplier`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (
      id: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getUser', 'id', id);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Login User
     * @param {string} username
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (
      username: string,
      password: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'username' is not null or undefined
      assertParamExists('login', 'username', username);
      // verify required parameter 'password' is not null or undefined
      assertParamExists('login', 'password', password);
      const localVarPath = `/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (username !== undefined) {
        localVarQueryParameter['username'] = username;
      }

      if (password !== undefined) {
        localVarQueryParameter['password'] = password;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} prodCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prodCategoryControllerDelete: async (
      prodCategoryID: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'prodCategoryID' is not null or undefined
      assertParamExists(
        'prodCategoryControllerDelete',
        'prodCategoryID',
        prodCategoryID
      );
      const localVarPath = `/prod-category/{prodCategoryID}`.replace(
        `{${'prodCategoryID'}}`,
        encodeURIComponent(String(prodCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken: async (
      refreshDto: RefreshDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refreshDto' is not null or undefined
      assertParamExists('refreshToken', 'refreshDto', refreshDto);
      const localVarPath = `/auth/refresh_token`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Register User
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      userDto: UserDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userDto' is not null or undefined
      assertParamExists('register', 'userDto', userDto);
      const localVarPath = `/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Expense by id
     * @param {number} id
     * @param {ExpensesDto} expensesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExpense: async (
      id: number,
      expensesDto: ExpensesDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateExpense', 'id', id);
      // verify required parameter 'expensesDto' is not null or undefined
      assertParamExists('updateExpense', 'expensesDto', expensesDto);
      const localVarPath = `/expenses/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        expensesDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {ExpensesCategoryDto} expensesCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExpensesCategory: async (
      expensesCategoryID: number,
      expensesCategoryDto: ExpensesCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'expensesCategoryID' is not null or undefined
      assertParamExists(
        'updateExpensesCategory',
        'expensesCategoryID',
        expensesCategoryID
      );
      // verify required parameter 'expensesCategoryDto' is not null or undefined
      assertParamExists(
        'updateExpensesCategory',
        'expensesCategoryDto',
        expensesCategoryDto
      );
      const localVarPath = `/expenses-category/{expensesCategoryID}`.replace(
        `{${'expensesCategoryID'}}`,
        encodeURIComponent(String(expensesCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        expensesCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Inventory by id
     * @param {string} itemCode
     * @param {InventoryDto} inventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventory: async (
      itemCode: string,
      inventoryDto: InventoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'itemCode' is not null or undefined
      assertParamExists('updateInventory', 'itemCode', itemCode);
      // verify required parameter 'inventoryDto' is not null or undefined
      assertParamExists('updateInventory', 'inventoryDto', inventoryDto);
      const localVarPath = `/inventory/{itemCode}`.replace(
        `{${'itemCode'}}`,
        encodeURIComponent(String(itemCode))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inventoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Inventory Category by id
     * @param {number} categoryID
     * @param {InventoryCategoryDto} inventoryCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventoryCategory: async (
      categoryID: number,
      inventoryCategoryDto: InventoryCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryID' is not null or undefined
      assertParamExists('updateInventoryCategory', 'categoryID', categoryID);
      // verify required parameter 'inventoryCategoryDto' is not null or undefined
      assertParamExists(
        'updateInventoryCategory',
        'inventoryCategoryDto',
        inventoryCategoryDto
      );
      const localVarPath = `/inventory_category/{categoryID}`.replace(
        `{${'categoryID'}}`,
        encodeURIComponent(String(categoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        inventoryCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Product by id
     * @param {string} productID
     * @param {ManageProductDto} manageProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct: async (
      productID: string,
      manageProductDto: ManageProductDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productID' is not null or undefined
      assertParamExists('updateProduct', 'productID', productID);
      // verify required parameter 'manageProductDto' is not null or undefined
      assertParamExists('updateProduct', 'manageProductDto', manageProductDto);
      const localVarPath = `/manage-product/{product_ID}`.replace(
        `{${'product_ID'}}`,
        encodeURIComponent(String(productID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        manageProductDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Product Category by id
     * @param {number} prodCategoryID
     * @param {ProdCategoryDto} prodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductCategory: async (
      prodCategoryID: number,
      prodCategoryDto: ProdCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'prodCategoryID' is not null or undefined
      assertParamExists(
        'updateProductCategory',
        'prodCategoryID',
        prodCategoryID
      );
      // verify required parameter 'prodCategoryDto' is not null or undefined
      assertParamExists(
        'updateProductCategory',
        'prodCategoryDto',
        prodCategoryDto
      );
      const localVarPath = `/prod-category/{prodCategoryID}`.replace(
        `{${'prodCategoryID'}}`,
        encodeURIComponent(String(prodCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        prodCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Product Size by id
     * @param {number} productSizeID
     * @param {ProductSizeDto} productSizeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductSize: async (
      productSizeID: number,
      productSizeDto: ProductSizeDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'productSizeID' is not null or undefined
      assertParamExists('updateProductSize', 'productSizeID', productSizeID);
      // verify required parameter 'productSizeDto' is not null or undefined
      assertParamExists('updateProductSize', 'productSizeDto', productSizeDto);
      const localVarPath = `/product-size/{productSizeID}`.replace(
        `{${'productSizeID'}}`,
        encodeURIComponent(String(productSizeID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        productSizeDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Purchase by id
     * @param {number} purchaseID
     * @param {PurchaseDto} purchaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePurchase: async (
      purchaseID: number,
      purchaseDto: PurchaseDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'purchaseID' is not null or undefined
      assertParamExists('updatePurchase', 'purchaseID', purchaseID);
      // verify required parameter 'purchaseDto' is not null or undefined
      assertParamExists('updatePurchase', 'purchaseDto', purchaseDto);
      const localVarPath = `/purchase/{purchaseID}`.replace(
        `{${'purchaseID'}}`,
        encodeURIComponent(String(purchaseID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        purchaseDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update Sell Record by id
     * @param {number} invoiceID
     * @param {SellRecordDto} sellRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSellRecord: async (
      invoiceID: number,
      sellRecordDto: SellRecordDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'invoiceID' is not null or undefined
      assertParamExists('updateSellRecord', 'invoiceID', invoiceID);
      // verify required parameter 'sellRecordDto' is not null or undefined
      assertParamExists('updateSellRecord', 'sellRecordDto', sellRecordDto);
      const localVarPath = `/sell-record/{invoiceID}`.replace(
        `{${'invoiceID'}}`,
        encodeURIComponent(String(invoiceID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        sellRecordDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {SubprodCategoryDto} subprodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubCategoryProduct: async (
      subProdCategoryID: number,
      subprodCategoryDto: SubprodCategoryDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'subProdCategoryID' is not null or undefined
      assertParamExists(
        'updateSubCategoryProduct',
        'subProdCategoryID',
        subProdCategoryID
      );
      // verify required parameter 'subprodCategoryDto' is not null or undefined
      assertParamExists(
        'updateSubCategoryProduct',
        'subprodCategoryDto',
        subprodCategoryDto
      );
      const localVarPath = `/subprod-category/{subProdCategoryID}`.replace(
        `{${'subProdCategoryID'}}`,
        encodeURIComponent(String(subProdCategoryID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        subprodCategoryDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update supplier by id
     * @param {number} supplierID
     * @param {SupplierDto} supplierDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupplier: async (
      supplierID: number,
      supplierDto: SupplierDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'supplierID' is not null or undefined
      assertParamExists('updateSupplier', 'supplierID', supplierID);
      // verify required parameter 'supplierDto' is not null or undefined
      assertParamExists('updateSupplier', 'supplierDto', supplierDto);
      const localVarPath = `/supplier/{supplierID}`.replace(
        `{${'supplierID'}}`,
        encodeURIComponent(String(supplierID))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        supplierDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user by id
     * @param {number} id
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser: async (
      id: number,
      userDto: UserDto,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateUser', 'id', id);
      // verify required parameter 'userDto' is not null or undefined
      assertParamExists('updateUser', 'userDto', userDto);
      const localVarPath = `/user/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userDto,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Add Media
     * @param {any} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadMedia: async (
      file?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/media/uploadFile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      if (file !== undefined) {
        localVarFormParams.append('file', file as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Add new Expense
     * @param {ExpensesDto} expensesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addExpenses(
      expensesDto: ExpensesDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addExpenses(
        expensesDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Expenses Category
     * @param {ExpensesCategoryDto} expensesCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addExpensesCategory(
      expensesCategoryDto: ExpensesCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExpensesCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addExpensesCategory(
          expensesCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Inventory
     * @param {InventoryDto} inventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addInventory(
      inventoryDto: InventoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addInventory(
        inventoryDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Inventory Category
     * @param {InventoryCategoryDto} inventoryCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addInventoryCategory(
      inventoryCategoryDto: InventoryCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InventoryCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addInventoryCategory(
          inventoryCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Product
     * @param {ManageProductDto} manageProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addProduct(
      manageProductDto: ManageProductDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManageProductDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(
        manageProductDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Product Category
     * @param {ProdCategoryDto} prodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addProductCategory(
      prodCategoryDto: ProdCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProdCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addProductCategory(
          prodCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Product Size
     * @param {ProductSizeDto} productSizeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addProductSize(
      productSizeDto: ProductSizeDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSizeDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addProductSize(
        productSizeDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Purchase
     * @param {PurchaseDto} purchaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addPurchase(
      purchaseDto: PurchaseDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addPurchase(
        purchaseDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new Sell Record
     * @param {SellRecordDto} sellRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSellRecord(
      sellRecordDto: SellRecordDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellRecordDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addSellRecord(
        sellRecordDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new SubCategory of Product
     * @param {SubprodCategoryDto} subprodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSubCategoryProduct(
      subprodCategoryDto: SubprodCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SubprodCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.addSubCategoryProduct(
          subprodCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new supplier
     * @param {SupplierDto} supplierDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addSupplier(
      supplierDto: SupplierDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addSupplier(
        supplierDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add new user
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addUser(
      userDto: UserDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(
        userDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Expense by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteExpense(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExpense(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteExpensesCategory(
      expensesCategoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExpensesCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteExpensesCategory(
          expensesCategoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Inventory by id
     * @param {string} itemCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteInventory(
      itemCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInventory(
        itemCode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Inventory Category by id
     * @param {number} categoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteInventoryCategory(
      categoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InventoryCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteInventoryCategory(
          categoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Media by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteMedia(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMedia(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Product by id
     * @param {string} productID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProduct(
      productID: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManageProductDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(
        productID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Product Size by id
     * @param {number} productSizeID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProductSize(
      productSizeID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSizeDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteProductSize(
          productSizeID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Purchase by id
     * @param {number} purchaseID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePurchase(
      purchaseID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePurchase(
        purchaseID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete Sell Record by id
     * @param {number} invoiceID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSellRecord(
      invoiceID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellRecordDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteSellRecord(invoiceID, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSubCategoryOfProduct(
      subProdCategoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SubprodCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteSubCategoryOfProduct(
          subProdCategoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete supplier by id
     * @param {number} supplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSupplier(
      supplierID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSupplier(
        supplierID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete user by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Expenses by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getExpense(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getExpense(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getExpenses(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<ExpensesDto>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenses(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getExpensesCategory(
      expensesCategoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExpensesCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getExpensesCategory(
          expensesCategoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Expenses Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getExpensesCategorys(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExpensesCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getExpensesCategorys(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Inventory by id
     * @param {string} itemCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInventory(
      itemCode: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInventory(
        itemCode,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Inventory Category by id
     * @param {number} categoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInventoryCategory(
      categoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InventoryCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getInventoryCategory(
          categoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Inventory Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInventoryCategorys(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InventoryCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getInventoryCategorys(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInventorys(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInventorys(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Media by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMedia(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMedia(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Product by id
     * @param {string} productID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProduct(
      productID: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManageProductDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(
        productID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Product Category by id
     * @param {number} prodCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductCategory(
      prodCategoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProdCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProductCategory(
          prodCategoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Product Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductCategorys(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProdCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProductCategorys(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Product Size by id
     * @param {number} productSizeID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductSize(
      productSizeID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSizeDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProductSize(
        productSizeID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProductSizes(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSizeDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProductSizes(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProducts(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManageProductDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProducts(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProfile(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Purchase by id
     * @param {number} purchaseID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPurchase(
      purchaseID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchase(
        purchaseID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPurchases(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchases(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get Sell Record by id
     * @param {number} invoiceID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSellRecord(
      invoiceID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellRecordDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSellRecord(
        invoiceID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all Sell Record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSellRecords(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellRecordDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSellRecords(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubCategoryProduct(
      subProdCategoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SubprodCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubCategoryProduct(
          subProdCategoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all SubCategory of Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSubCategoryProducts(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SubprodCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSubCategoryProducts(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get supplier by id
     * @param {number} supplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSupplier(
      supplierID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSupplier(
        supplierID,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all supplier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSuppliers(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSuppliers(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get user by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      id: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Login User
     * @param {string} username
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      username: string,
      password: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(
        username,
        password,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {number} prodCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async prodCategoryControllerDelete(
      prodCategoryID: number,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProdCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.prodCategoryControllerDelete(
          prodCategoryID,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refreshToken(
      refreshDto: RefreshDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(
        refreshDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Register User
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      userDto: UserDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        userDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Expense by id
     * @param {number} id
     * @param {ExpensesDto} expensesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateExpense(
      id: number,
      expensesDto: ExpensesDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpensesDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpense(
        id,
        expensesDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {ExpensesCategoryDto} expensesCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateExpensesCategory(
      expensesCategoryID: number,
      expensesCategoryDto: ExpensesCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ExpensesCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateExpensesCategory(
          expensesCategoryID,
          expensesCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Inventory by id
     * @param {string} itemCode
     * @param {InventoryDto} inventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateInventory(
      itemCode: string,
      inventoryDto: InventoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InventoryDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateInventory(
        itemCode,
        inventoryDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Inventory Category by id
     * @param {number} categoryID
     * @param {InventoryCategoryDto} inventoryCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateInventoryCategory(
      categoryID: number,
      inventoryCategoryDto: InventoryCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<InventoryCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateInventoryCategory(
          categoryID,
          inventoryCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Product by id
     * @param {string} productID
     * @param {ManageProductDto} manageProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProduct(
      productID: string,
      manageProductDto: ManageProductDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ManageProductDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(
        productID,
        manageProductDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Product Category by id
     * @param {number} prodCategoryID
     * @param {ProdCategoryDto} prodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProductCategory(
      prodCategoryID: number,
      prodCategoryDto: ProdCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<ProdCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProductCategory(
          prodCategoryID,
          prodCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Product Size by id
     * @param {number} productSizeID
     * @param {ProductSizeDto} productSizeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProductSize(
      productSizeID: number,
      productSizeDto: ProductSizeDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSizeDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateProductSize(
          productSizeID,
          productSizeDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Purchase by id
     * @param {number} purchaseID
     * @param {PurchaseDto} purchaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePurchase(
      purchaseID: number,
      purchaseDto: PurchaseDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePurchase(
        purchaseID,
        purchaseDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update Sell Record by id
     * @param {number} invoiceID
     * @param {SellRecordDto} sellRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSellRecord(
      invoiceID: number,
      sellRecordDto: SellRecordDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SellRecordDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateSellRecord(
          invoiceID,
          sellRecordDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {SubprodCategoryDto} subprodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSubCategoryProduct(
      subProdCategoryID: number,
      subprodCategoryDto: SubprodCategoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<SubprodCategoryDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.updateSubCategoryProduct(
          subProdCategoryID,
          subprodCategoryDto,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update supplier by id
     * @param {number} supplierID
     * @param {SupplierDto} supplierDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateSupplier(
      supplierID: number,
      supplierDto: SupplierDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplierDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateSupplier(
        supplierID,
        supplierDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update user by id
     * @param {number} id
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUser(
      id: number,
      userDto: UserDto,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(
        id,
        userDto,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Add Media
     * @param {any} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadMedia(
      file?: any,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMedia(
        file,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @summary Add new Expense
     * @param {ExpensesDto} expensesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExpenses(
      expensesDto: ExpensesDto,
      options?: any
    ): AxiosPromise<ExpensesDto> {
      return localVarFp
        .addExpenses(expensesDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Expenses Category
     * @param {ExpensesCategoryDto} expensesCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addExpensesCategory(
      expensesCategoryDto: ExpensesCategoryDto,
      options?: any
    ): AxiosPromise<ExpensesCategoryDto> {
      return localVarFp
        .addExpensesCategory(expensesCategoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Inventory
     * @param {InventoryDto} inventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventory(
      inventoryDto: InventoryDto,
      options?: any
    ): AxiosPromise<InventoryDto> {
      return localVarFp
        .addInventory(inventoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Inventory Category
     * @param {InventoryCategoryDto} inventoryCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addInventoryCategory(
      inventoryCategoryDto: InventoryCategoryDto,
      options?: any
    ): AxiosPromise<InventoryCategoryDto> {
      return localVarFp
        .addInventoryCategory(inventoryCategoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Product
     * @param {ManageProductDto} manageProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProduct(
      manageProductDto: ManageProductDto,
      options?: any
    ): AxiosPromise<ManageProductDto> {
      return localVarFp
        .addProduct(manageProductDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Product Category
     * @param {ProdCategoryDto} prodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProductCategory(
      prodCategoryDto: ProdCategoryDto,
      options?: any
    ): AxiosPromise<ProdCategoryDto> {
      return localVarFp
        .addProductCategory(prodCategoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Product Size
     * @param {ProductSizeDto} productSizeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addProductSize(
      productSizeDto: ProductSizeDto,
      options?: any
    ): AxiosPromise<ProductSizeDto> {
      return localVarFp
        .addProductSize(productSizeDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Purchase
     * @param {PurchaseDto} purchaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addPurchase(
      purchaseDto: PurchaseDto,
      options?: any
    ): AxiosPromise<PurchaseDto> {
      return localVarFp
        .addPurchase(purchaseDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new Sell Record
     * @param {SellRecordDto} sellRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSellRecord(
      sellRecordDto: SellRecordDto,
      options?: any
    ): AxiosPromise<SellRecordDto> {
      return localVarFp
        .addSellRecord(sellRecordDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new SubCategory of Product
     * @param {SubprodCategoryDto} subprodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubCategoryProduct(
      subprodCategoryDto: SubprodCategoryDto,
      options?: any
    ): AxiosPromise<SubprodCategoryDto> {
      return localVarFp
        .addSubCategoryProduct(subprodCategoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new supplier
     * @param {SupplierDto} supplierDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSupplier(
      supplierDto: SupplierDto,
      options?: any
    ): AxiosPromise<SupplierDto> {
      return localVarFp
        .addSupplier(supplierDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add new user
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUser(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .addUser(userDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Expense by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExpense(id: number, options?: any): AxiosPromise<ExpensesDto> {
      return localVarFp
        .deleteExpense(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteExpensesCategory(
      expensesCategoryID: number,
      options?: any
    ): AxiosPromise<ExpensesCategoryDto> {
      return localVarFp
        .deleteExpensesCategory(expensesCategoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Inventory by id
     * @param {string} itemCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventory(
      itemCode: string,
      options?: any
    ): AxiosPromise<InventoryDto> {
      return localVarFp
        .deleteInventory(itemCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Inventory Category by id
     * @param {number} categoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInventoryCategory(
      categoryID: number,
      options?: any
    ): AxiosPromise<InventoryCategoryDto> {
      return localVarFp
        .deleteInventoryCategory(categoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Media by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMedia(id: number, options?: any): AxiosPromise<MediaDto> {
      return localVarFp
        .deleteMedia(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Product by id
     * @param {string} productID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProduct(
      productID: string,
      options?: any
    ): AxiosPromise<ManageProductDto> {
      return localVarFp
        .deleteProduct(productID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Product Size by id
     * @param {number} productSizeID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductSize(
      productSizeID: number,
      options?: any
    ): AxiosPromise<ProductSizeDto> {
      return localVarFp
        .deleteProductSize(productSizeID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Purchase by id
     * @param {number} purchaseID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePurchase(
      purchaseID: number,
      options?: any
    ): AxiosPromise<PurchaseDto> {
      return localVarFp
        .deletePurchase(purchaseID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete Sell Record by id
     * @param {number} invoiceID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSellRecord(
      invoiceID: number,
      options?: any
    ): AxiosPromise<SellRecordDto> {
      return localVarFp
        .deleteSellRecord(invoiceID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubCategoryOfProduct(
      subProdCategoryID: number,
      options?: any
    ): AxiosPromise<SubprodCategoryDto> {
      return localVarFp
        .deleteSubCategoryOfProduct(subProdCategoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete supplier by id
     * @param {number} supplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSupplier(
      supplierID: number,
      options?: any
    ): AxiosPromise<SupplierDto> {
      return localVarFp
        .deleteSupplier(supplierID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete user by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUser(id: number, options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .deleteUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Expenses by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpense(id: number, options?: any): AxiosPromise<ExpensesDto> {
      return localVarFp
        .getExpense(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpenses(options?: any): AxiosPromise<Array<ExpensesDto>> {
      return localVarFp
        .getExpenses(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpensesCategory(
      expensesCategoryID: number,
      options?: any
    ): AxiosPromise<ExpensesCategoryDto> {
      return localVarFp
        .getExpensesCategory(expensesCategoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Expenses Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getExpensesCategorys(options?: any): AxiosPromise<ExpensesCategoryDto> {
      return localVarFp
        .getExpensesCategorys(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Inventory by id
     * @param {string} itemCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventory(itemCode: string, options?: any): AxiosPromise<InventoryDto> {
      return localVarFp
        .getInventory(itemCode, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Inventory Category by id
     * @param {number} categoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventoryCategory(
      categoryID: number,
      options?: any
    ): AxiosPromise<InventoryCategoryDto> {
      return localVarFp
        .getInventoryCategory(categoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Inventory Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventoryCategorys(options?: any): AxiosPromise<InventoryCategoryDto> {
      return localVarFp
        .getInventoryCategorys(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInventorys(options?: any): AxiosPromise<InventoryDto> {
      return localVarFp
        .getInventorys(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Media by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMedia(id: number, options?: any): AxiosPromise<MediaDto> {
      return localVarFp
        .getMedia(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Product by id
     * @param {string} productID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProduct(
      productID: string,
      options?: any
    ): AxiosPromise<ManageProductDto> {
      return localVarFp
        .getProduct(productID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Product Category by id
     * @param {number} prodCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductCategory(
      prodCategoryID: number,
      options?: any
    ): AxiosPromise<ProdCategoryDto> {
      return localVarFp
        .getProductCategory(prodCategoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Product Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductCategorys(options?: any): AxiosPromise<ProdCategoryDto> {
      return localVarFp
        .getProductCategorys(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Product Size by id
     * @param {number} productSizeID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductSize(
      productSizeID: number,
      options?: any
    ): AxiosPromise<ProductSizeDto> {
      return localVarFp
        .getProductSize(productSizeID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Product Size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductSizes(options?: any): AxiosPromise<ProductSizeDto> {
      return localVarFp
        .getProductSizes(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProducts(options?: any): AxiosPromise<ManageProductDto> {
      return localVarFp
        .getProducts(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProfile(options?: any): AxiosPromise<void> {
      return localVarFp
        .getProfile(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Purchase by id
     * @param {number} purchaseID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchase(purchaseID: number, options?: any): AxiosPromise<PurchaseDto> {
      return localVarFp
        .getPurchase(purchaseID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Purchase
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPurchases(options?: any): AxiosPromise<PurchaseDto> {
      return localVarFp
        .getPurchases(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get Sell Record by id
     * @param {number} invoiceID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellRecord(
      invoiceID: number,
      options?: any
    ): AxiosPromise<SellRecordDto> {
      return localVarFp
        .getSellRecord(invoiceID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Sell Record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSellRecords(options?: any): AxiosPromise<SellRecordDto> {
      return localVarFp
        .getSellRecords(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubCategoryProduct(
      subProdCategoryID: number,
      options?: any
    ): AxiosPromise<SubprodCategoryDto> {
      return localVarFp
        .getSubCategoryProduct(subProdCategoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all SubCategory of Product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubCategoryProducts(options?: any): AxiosPromise<SubprodCategoryDto> {
      return localVarFp
        .getSubCategoryProducts(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get supplier by id
     * @param {number} supplierID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSupplier(supplierID: number, options?: any): AxiosPromise<SupplierDto> {
      return localVarFp
        .getSupplier(supplierID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all supplier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSuppliers(options?: any): AxiosPromise<SupplierDto> {
      return localVarFp
        .getSuppliers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user by id
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: number, options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .getUser(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .getUsers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Login User
     * @param {string} username
     * @param {string} password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(
      username: string,
      password: string,
      options?: any
    ): AxiosPromise<AccessTokenDto> {
      return localVarFp
        .login(username, password, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): AxiosPromise<void> {
      return localVarFp
        .logout(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} prodCategoryID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    prodCategoryControllerDelete(
      prodCategoryID: number,
      options?: any
    ): AxiosPromise<ProdCategoryDto> {
      return localVarFp
        .prodCategoryControllerDelete(prodCategoryID, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshToken(
      refreshDto: RefreshDto,
      options?: any
    ): AxiosPromise<AccessTokenDto> {
      return localVarFp
        .refreshToken(refreshDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Register User
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
      return localVarFp
        .register(userDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Expense by id
     * @param {number} id
     * @param {ExpensesDto} expensesDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExpense(
      id: number,
      expensesDto: ExpensesDto,
      options?: any
    ): AxiosPromise<ExpensesDto> {
      return localVarFp
        .updateExpense(id, expensesDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Expenses Category by id
     * @param {number} expensesCategoryID
     * @param {ExpensesCategoryDto} expensesCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateExpensesCategory(
      expensesCategoryID: number,
      expensesCategoryDto: ExpensesCategoryDto,
      options?: any
    ): AxiosPromise<ExpensesCategoryDto> {
      return localVarFp
        .updateExpensesCategory(
          expensesCategoryID,
          expensesCategoryDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Inventory by id
     * @param {string} itemCode
     * @param {InventoryDto} inventoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventory(
      itemCode: string,
      inventoryDto: InventoryDto,
      options?: any
    ): AxiosPromise<InventoryDto> {
      return localVarFp
        .updateInventory(itemCode, inventoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Inventory Category by id
     * @param {number} categoryID
     * @param {InventoryCategoryDto} inventoryCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateInventoryCategory(
      categoryID: number,
      inventoryCategoryDto: InventoryCategoryDto,
      options?: any
    ): AxiosPromise<InventoryCategoryDto> {
      return localVarFp
        .updateInventoryCategory(categoryID, inventoryCategoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Product by id
     * @param {string} productID
     * @param {ManageProductDto} manageProductDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProduct(
      productID: string,
      manageProductDto: ManageProductDto,
      options?: any
    ): AxiosPromise<ManageProductDto> {
      return localVarFp
        .updateProduct(productID, manageProductDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Product Category by id
     * @param {number} prodCategoryID
     * @param {ProdCategoryDto} prodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductCategory(
      prodCategoryID: number,
      prodCategoryDto: ProdCategoryDto,
      options?: any
    ): AxiosPromise<ProdCategoryDto> {
      return localVarFp
        .updateProductCategory(prodCategoryID, prodCategoryDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Product Size by id
     * @param {number} productSizeID
     * @param {ProductSizeDto} productSizeDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductSize(
      productSizeID: number,
      productSizeDto: ProductSizeDto,
      options?: any
    ): AxiosPromise<ProductSizeDto> {
      return localVarFp
        .updateProductSize(productSizeID, productSizeDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Purchase by id
     * @param {number} purchaseID
     * @param {PurchaseDto} purchaseDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePurchase(
      purchaseID: number,
      purchaseDto: PurchaseDto,
      options?: any
    ): AxiosPromise<PurchaseDto> {
      return localVarFp
        .updatePurchase(purchaseID, purchaseDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update Sell Record by id
     * @param {number} invoiceID
     * @param {SellRecordDto} sellRecordDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSellRecord(
      invoiceID: number,
      sellRecordDto: SellRecordDto,
      options?: any
    ): AxiosPromise<SellRecordDto> {
      return localVarFp
        .updateSellRecord(invoiceID, sellRecordDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update SubCategory of Product by id
     * @param {number} subProdCategoryID
     * @param {SubprodCategoryDto} subprodCategoryDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubCategoryProduct(
      subProdCategoryID: number,
      subprodCategoryDto: SubprodCategoryDto,
      options?: any
    ): AxiosPromise<SubprodCategoryDto> {
      return localVarFp
        .updateSubCategoryProduct(
          subProdCategoryID,
          subprodCategoryDto,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update supplier by id
     * @param {number} supplierID
     * @param {SupplierDto} supplierDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSupplier(
      supplierID: number,
      supplierDto: SupplierDto,
      options?: any
    ): AxiosPromise<SupplierDto> {
      return localVarFp
        .updateSupplier(supplierID, supplierDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user by id
     * @param {number} id
     * @param {UserDto} userDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUser(
      id: number,
      userDto: UserDto,
      options?: any
    ): AxiosPromise<UserDto> {
      return localVarFp
        .updateUser(id, userDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Add Media
     * @param {any} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadMedia(file?: any, options?: any): AxiosPromise<MediaDto> {
      return localVarFp
        .uploadMedia(file, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @summary Add new Expense
   * @param {ExpensesDto} expensesDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addExpenses(expensesDto: ExpensesDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .addExpenses(expensesDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Expenses Category
   * @param {ExpensesCategoryDto} expensesCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addExpensesCategory(
    expensesCategoryDto: ExpensesCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addExpensesCategory(expensesCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Inventory
   * @param {InventoryDto} inventoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addInventory(
    inventoryDto: InventoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addInventory(inventoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Inventory Category
   * @param {InventoryCategoryDto} inventoryCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addInventoryCategory(
    inventoryCategoryDto: InventoryCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addInventoryCategory(inventoryCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Product
   * @param {ManageProductDto} manageProductDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addProduct(
    manageProductDto: ManageProductDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addProduct(manageProductDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Product Category
   * @param {ProdCategoryDto} prodCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addProductCategory(
    prodCategoryDto: ProdCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addProductCategory(prodCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Product Size
   * @param {ProductSizeDto} productSizeDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addProductSize(
    productSizeDto: ProductSizeDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addProductSize(productSizeDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Purchase
   * @param {PurchaseDto} purchaseDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addPurchase(purchaseDto: PurchaseDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .addPurchase(purchaseDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new Sell Record
   * @param {SellRecordDto} sellRecordDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addSellRecord(
    sellRecordDto: SellRecordDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addSellRecord(sellRecordDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new SubCategory of Product
   * @param {SubprodCategoryDto} subprodCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addSubCategoryProduct(
    subprodCategoryDto: SubprodCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .addSubCategoryProduct(subprodCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new supplier
   * @param {SupplierDto} supplierDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addSupplier(supplierDto: SupplierDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .addSupplier(supplierDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add new user
   * @param {UserDto} userDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public addUser(userDto: UserDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .addUser(userDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Expense by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteExpense(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteExpense(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Expenses Category by id
   * @param {number} expensesCategoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteExpensesCategory(
    expensesCategoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteExpensesCategory(expensesCategoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Inventory by id
   * @param {string} itemCode
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteInventory(itemCode: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteInventory(itemCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Inventory Category by id
   * @param {number} categoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteInventoryCategory(
    categoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteInventoryCategory(categoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Media by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteMedia(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteMedia(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Product by id
   * @param {string} productID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteProduct(productID: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteProduct(productID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Product Size by id
   * @param {number} productSizeID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteProductSize(
    productSizeID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteProductSize(productSizeID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Purchase by id
   * @param {number} purchaseID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deletePurchase(purchaseID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deletePurchase(purchaseID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete Sell Record by id
   * @param {number} invoiceID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteSellRecord(invoiceID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteSellRecord(invoiceID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete SubCategory of Product by id
   * @param {number} subProdCategoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteSubCategoryOfProduct(
    subProdCategoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .deleteSubCategoryOfProduct(subProdCategoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete supplier by id
   * @param {number} supplierID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteSupplier(supplierID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteSupplier(supplierID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete user by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public deleteUser(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .deleteUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Expenses by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getExpense(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getExpense(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Product Size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getExpenses(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getExpenses(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Expenses Category by id
   * @param {number} expensesCategoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getExpensesCategory(
    expensesCategoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getExpensesCategory(expensesCategoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Expenses Category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getExpensesCategorys(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getExpensesCategorys(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Inventory by id
   * @param {string} itemCode
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getInventory(itemCode: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getInventory(itemCode, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Inventory Category by id
   * @param {number} categoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getInventoryCategory(
    categoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getInventoryCategory(categoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Inventory Category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getInventoryCategorys(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getInventoryCategorys(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Inventory
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getInventorys(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getInventorys(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Media by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getMedia(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getMedia(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Product by id
   * @param {string} productID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProduct(productID: string, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getProduct(productID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Product Category by id
   * @param {number} prodCategoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProductCategory(
    prodCategoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getProductCategory(prodCategoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Product Category
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProductCategorys(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getProductCategorys(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Product Size by id
   * @param {number} productSizeID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProductSize(productSizeID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getProductSize(productSizeID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Product Size
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProductSizes(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getProductSizes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Product
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProducts(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getProducts(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary get profile info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getProfile(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getProfile(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Purchase by id
   * @param {number} purchaseID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getPurchase(purchaseID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getPurchase(purchaseID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Purchase
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getPurchases(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getPurchases(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get Sell Record by id
   * @param {number} invoiceID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSellRecord(invoiceID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getSellRecord(invoiceID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Sell Record
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSellRecords(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getSellRecords(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get SubCategory of Product by id
   * @param {number} subProdCategoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSubCategoryProduct(
    subProdCategoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .getSubCategoryProduct(subProdCategoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all SubCategory of Product
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSubCategoryProducts(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getSubCategoryProducts(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get supplier by id
   * @param {number} supplierID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSupplier(supplierID: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getSupplier(supplierID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all supplier
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getSuppliers(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getSuppliers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user by id
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUser(id: number, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getUser(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getUsers(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Login User
   * @param {string} username
   * @param {string} password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public login(
    username: string,
    password: string,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .login(username, password, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary logout given user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public logout(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .logout(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} prodCategoryID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public prodCategoryControllerDelete(
    prodCategoryID: number,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .prodCategoryControllerDelete(prodCategoryID, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Refresh Token
   * @param {RefreshDto} refreshDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .refreshToken(refreshDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Register User
   * @param {UserDto} userDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public register(userDto: UserDto, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .register(userDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Expense by id
   * @param {number} id
   * @param {ExpensesDto} expensesDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateExpense(
    id: number,
    expensesDto: ExpensesDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateExpense(id, expensesDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Expenses Category by id
   * @param {number} expensesCategoryID
   * @param {ExpensesCategoryDto} expensesCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateExpensesCategory(
    expensesCategoryID: number,
    expensesCategoryDto: ExpensesCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateExpensesCategory(expensesCategoryID, expensesCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Inventory by id
   * @param {string} itemCode
   * @param {InventoryDto} inventoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateInventory(
    itemCode: string,
    inventoryDto: InventoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateInventory(itemCode, inventoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Inventory Category by id
   * @param {number} categoryID
   * @param {InventoryCategoryDto} inventoryCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateInventoryCategory(
    categoryID: number,
    inventoryCategoryDto: InventoryCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateInventoryCategory(categoryID, inventoryCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Product by id
   * @param {string} productID
   * @param {ManageProductDto} manageProductDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateProduct(
    productID: string,
    manageProductDto: ManageProductDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateProduct(productID, manageProductDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Product Category by id
   * @param {number} prodCategoryID
   * @param {ProdCategoryDto} prodCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateProductCategory(
    prodCategoryID: number,
    prodCategoryDto: ProdCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateProductCategory(prodCategoryID, prodCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Product Size by id
   * @param {number} productSizeID
   * @param {ProductSizeDto} productSizeDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateProductSize(
    productSizeID: number,
    productSizeDto: ProductSizeDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateProductSize(productSizeID, productSizeDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Purchase by id
   * @param {number} purchaseID
   * @param {PurchaseDto} purchaseDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updatePurchase(
    purchaseID: number,
    purchaseDto: PurchaseDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updatePurchase(purchaseID, purchaseDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update Sell Record by id
   * @param {number} invoiceID
   * @param {SellRecordDto} sellRecordDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateSellRecord(
    invoiceID: number,
    sellRecordDto: SellRecordDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateSellRecord(invoiceID, sellRecordDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update SubCategory of Product by id
   * @param {number} subProdCategoryID
   * @param {SubprodCategoryDto} subprodCategoryDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateSubCategoryProduct(
    subProdCategoryID: number,
    subprodCategoryDto: SubprodCategoryDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateSubCategoryProduct(subProdCategoryID, subprodCategoryDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update supplier by id
   * @param {number} supplierID
   * @param {SupplierDto} supplierDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateSupplier(
    supplierID: number,
    supplierDto: SupplierDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateSupplier(supplierID, supplierDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user by id
   * @param {number} id
   * @param {UserDto} userDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public updateUser(
    id: number,
    userDto: UserDto,
    options?: AxiosRequestConfig
  ) {
    return DefaultApiFp(this.configuration)
      .updateUser(id, userDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Add Media
   * @param {any} [file]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public uploadMedia(file?: any, options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .uploadMedia(file, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
